package question2;

/**
 * Classe-test Pile3Test.
 * 
 * @author (votre nom)
 * @version (un numÃ©ro de version ou une date)
 * 
 *          Les classes-test sont documentÃ©es ici :
 *          http://junit.sourceforge.net/javadoc/junit/framework/TestCase.html
 *          et sont basÃ©es sur le document Â© 2002 Robert A. Ballance intitulÃ©
 *          Â«JUnit: Unit Testing FrameworkÂ».
 * 
 *          Les objets Test (et TestSuite) sont associÃ©s aux classes Ã  tester
 *          par la simple relation yyyTest (e.g. qu'un Test de la classe
 *          Name.java se nommera NameTest.java); les deux se retrouvent dans le
 *          mÃªme paquetage. Les "engagements" (anglais : "fixture") forment un
 *          ensemble de conditions qui sont vraies pour chaque mÃ©thode Test Ã 
 *          exÃ©cuter. Il peut y avoir plus d'une mÃ©thode Test dans une classe
 *          Test; leur ensemble forme un objet TestSuite. BlueJ dÃ©couvrira
 *          automatiquement (par introspection) les mÃ©thodes Test de votre
 *          classe Test et gÃ©nÃ©rera la TestSuite consÃ©quente. Chaque appel d'une
 *          mÃ©thode Test sera prÃ©cÃ©dÃ© d'un appel de setUp(), qui rÃ©alise les
 *          engagements, et suivi d'un appel Ã  tearDown(), qui les dÃ©truit.
 */
public class Pile3Test extends junit.framework.TestCase {
    // DÃ©finissez ici les variables d'instance nÃ©cessaires Ã  vos engagements;
    // Vous pouvez Ã©galement les saisir automatiquement du prÃ©sentoir
    // Ã  l'aide du menu contextuel "PrÃ©sentoir --> Engagements".
    // Notez cependant que ce dernier ne peut saisir les objets primitifs
    // du prÃ©sentoir (les objets sans constructeur, comme int, float, etc.).

    private PileI p1;
    private PileI p2;
    /**
     * Constructeur de la classe-test Pile3Test
     */
    public Pile3Test() {
    }

    /**
     * Met en place les engagements.
     * 
     * MÃ©thode appelÃ©e avant chaque appel de mÃ©thode de test.
     */
    protected void setUp() // throws java.lang.Exception
    {
        p1 = new Pile3();
        p2 = new Pile3(10);
    }

    public void test_Pile3_capacite() {
        assertEquals(p1.CAPACITE_PAR_DEFAUT, p1.capacite());
        assertEquals(10, p2.capacite());
        }
    public void test_Pile3_estPleine_taille_sommet() throws Exception {
        PileI p = new Pile3(2);
        p.empiler("A");
        assertEquals(1, p.taille());
        assertEquals("A", p.sommet());
        p.empiler("B");
        assertEquals(2, p.taille());
        assertEquals("B", p.sommet());
        assertEquals(true, p.estPleine());
        assertEquals(p.taille(), p.capacite());
        try {
            p.empiler("c");
            fail();
        } catch (Exception e) {
            assertTrue(e instanceof question1.PilePleineException);
        }
    }
     public void test_Pile3_estVide() throws Exception {
        PileI p = new Pile3(4);
        assertTrue(p.estVide());
        try {
            Object v = p.depiler();
            fail();
        } catch (Exception e) {
            assertTrue(e instanceof question1.PileVideException);
        }
    }
    public void test_Pile_toString() throws Exception {
        PileI pile1 = new Pile3(3);
        assertEquals("toString incorrect ? ", "[]", pile1.toString());
        pile1.empiler("a");
        assertEquals("toString incorrect ? ", "[a]", pile1.toString());
        pile1.empiler("b");
        assertEquals("toString incorrect ? ", "[b, a]", pile1.toString());
        pile1.empiler("c");
        assertEquals("toString incorrect ? ", "[c, b, a]", pile1.toString());

    }
       public void test_Pile3_TailleNegative() {
        PileI p = new Pile2(-1);
        assertEquals(p.CAPACITE_PAR_DEFAUT, p.capacite());

    }

    public void test_Pile3_equals() throws Exception {
        PileI pile1 = new Pile3();
        pile1.empiler("A");
        pile1.empiler("b");
        pile1.empiler(1);

        p1.empiler("A");
        p1.empiler("b");
        assertFalse(pile1.equals(p1));
        p1.empiler(1);
        assertEquals(true,pile1.equals(p1));
        assertTrue("égalité de deux piles ? ", p1.equals(pile1));
        assertTrue("égalité de deux piles ? ", pile1.equals(p1));

        p1.empiler(1);
        assertFalse("égalité de deux piles ? ", pile1.equals(p1));

    }
    protected void tearDown() // throws java.lang.Exception
    {
       p1=null;
       p2=null;
    }
}
